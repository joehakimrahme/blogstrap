# variable: {{ variable }}

Features
--------

{{ toc }}

Blogstrap is pretty minimal by design but it does present some
features and various levels of customizations:

* **Hidden files**: Blogstrap will return a 404 if requesting an
  article with a filename starting with `.`. This should allow you to
  commit dot configuration files like `.git` or `.gitconfig`. without
  fearing them getting accessed. It also ensures that nothing in the
  blogstrap configuration directory (`.blogstrap`) is going to be
  served.

* **Navbar Links**: The optional configuration variable
  **NAVBAR_LINKS** takes a key:value map of link:urls, and allows the
  creation of links to the pages that are present on the navbar at
  every page.

* **Page Variables**: Blogstrap presents page variables that can be
  inserted in your articles. More info on the available Page Variables
  and how to control their values can be found below.

* **TOC blacklist**: The optional configuration variable
  **TOC_BLACKLIST** allows to explicitly remove some pages from the
  `toc` variable.

* **Overshadow**: Makes it possible to serve different content for
  markdown and html. If a file exists with the same name and
  `.html`/`.md` suffix, it will be served in priority when requested.

* **User Metadata**: At the top of the article, any line following the
  pattern `# <key>: <value>` will be treated as User Metadata. This
  means it will be stripped out of the served content. **Page
  Variables** can use these metadata to replace some values locally to
  some files. Future features will be using these metadata as well.


Overshadow Examples
-------------------

```
.
├── article
└── article.html
```

If `text/html` is requested then `article.html` will be served.
`article` will be served in any other case.

```
.
├── article
└── article.md
```

In this case, if `text/html` is requested then `article` will be
served. `article.md` will be served in any other case.

```
.
├── article
├── article.html
└── article.md
```

In this case, `article` will never be served.


Understanding Page Variables
----------------------------

A **Page Variable** is a placeholder within the article that gets
dynamically replaced before serving. A page variable follows the
format `{{ variable }}`. Before serving an article, Blogstrap will
look for any string that matches this pattern in the content and will
replace it with its value.

Here's a list of the available Page Variables and their default
values:

* **author**: "Blogstrap" (default)
* **description**: "Powered By Blogstrap" (default)
* **author**: "Powered By Blogstrap" (default)
* **toc**: Generates a dynamic table of content, based on the
available files on disk. Some files can be ignored by using the
**TOC_BLACKLIST** config option. The generated TOC will be formatted
in HTMl or MD depending on the incoming http request.

There are 2 ways to modify the values of a Page Variable:

- Defining the variable in the Blogstrap config file. This will have a
  projet-wide effect and will change the value for all the articles.
- As a User Metadata at the top of a file. This will only overwrite
  the value in the scope of that file.
